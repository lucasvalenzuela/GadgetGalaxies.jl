var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GadgetGalaxies","category":"page"},{"location":"#GadgetGalaxies","page":"Home","title":"GadgetGalaxies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GadgetGalaxies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GadgetGalaxies]","category":"page"},{"location":"#GadgetGalaxies.Galaxy","page":"Home","title":"GadgetGalaxies.Galaxy","text":"Galaxy(snapshot::Snapshot,\n       isub::Integer,\n       subid::Union{HaloID,Nothing},\n       particles::Dict{Symbol,Particles})\n\nGalaxy of a given snapshot (Snapshot) with the zero-based subhalo index isub with Particles. Including subid (containing information on the exact position in the subfind files) makes accessing properties of the galaxy faster than when only having isub.\n\nThe particles are accessible via galaxy.particletype or galaxy[:particletype] (see Particles for typical types).\n\nExamples\n\njulia> p = GadgetGalaxies.Particles(:stars, Dict(\"ID\"=>[1, 2], \"MASS\"=>[1e11, 2e11]));\n\njulia> g = Galaxy(Snapshot(\"box\", 13), 1532, nothing, Dict(:stars=>p));\n\njulia> g.stars === p\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Galaxy-Tuple{Snapshot, Integer, Bool}","page":"Home","title":"GadgetGalaxies.Galaxy","text":"Galaxy(snapshot::Snapshot, isub[, get_id=true])\n\nConvenience method for creating a Galaxy with only a snapshot and a subfind id. Will try to read \"MSUB\" to extract the  if get_id is true.\n\nParticles can still be added after initializing the halo by calling for example galaxy.stars = [...].\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.Particles","page":"Home","title":"GadgetGalaxies.Particles","text":"Particles(type::Symbol, properties::Dict{String})\n\nParticles of a type (typically :stars, :dm, :gas, or :bh) with their properties in a Dict. The Dict has String keys, which are set to all uppercase by default, with exception of iM and Zs.\n\nThe properties are accessible via particles.prop (case insensitive).\n\nExamples\n\njulia> p = GadgetGalaxies.Particles(:stars, Dict(\"ID\"=>[1, 2], \"MASS\"=>[1e11, 2e11]));\n\njulia> p.id\n2-element Vector{Int64}:\n 1\n 2\n\njulia> p.pos = [1 2; 3 4; 5 6]\n3×2 Matrix{Int64}:\n 1  2\n 3  4\n 5  6\n\njulia> p.properties[\"POS\"] === p.pos\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Snapshot","page":"Home","title":"GadgetGalaxies.Snapshot","text":"Snapshot(snapbase, subbase)\n\nReturns a Snapshot from a snapbase and a subbase, which can also be nothing. Both can be files or the base part of files ending with .0, .1, etc.\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Snapshot-Tuple{Any, Integer}","page":"Home","title":"GadgetGalaxies.Snapshot","text":"Snapshot(path_box, snap::Integer; snapbase=true, subbase=true)\n\nConvenience method for creating a Snapshot from the path to a simulated box and a snapshot number. Setting snapbase or subbase to false sets the respective file base to nothing.\n\nThe formats used are the following, for snapbase and subbase, respectively:\n\nsnapdir_XXX/snap_XXX\ngroups_XXX/sub_XXX\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.Snapshot-Tuple{}","page":"Home","title":"GadgetGalaxies.Snapshot","text":"Snapshot(; snapbase=nothing, subbase=nothing)\n\nConvenience method for creating a Snapshot where one of the base files does not exist.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.convert_units!","page":"Home","title":"GadgetGalaxies.convert_units!","text":"convert_units!(p::Particles, h::SnapshotHeader, units::Symbol=:full)\n\nConverts the units of the particles properties (see Particles) from a snapshot header in-place. Use :full for units as Unitful quantities, :physical for values converted to physical units (kpc, km/s, solar metallicities etc.), or :sim for values in simulation units. The individual metallicities in \"Zs\" are converted to a one-dimensional Vector of values in solar metallicities in any case.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_full","page":"Home","title":"GadgetGalaxies.convert_units_full","text":"convert_units_physical(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\nconvert_units_physical!(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\nconvert_units_full(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\n\nConverts simulation values to the respective physical values, depending on prop, which can take any of the following values: :pos, :vel, :temp, :mass, :age.\n\nFull returns values in Unitful quantities, whereas physical returns the phyiscal value without unit.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_full_mass","page":"Home","title":"GadgetGalaxies.convert_units_full_mass","text":"convert_units_physical_mass(val::Real, h::SnapshotHeader)\nconvert_units_physical_mass(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_mass!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_mass(val::Real, h::SnapshotHeader)\nconvert_units_full_mass(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts masses via m to m times 10^10  h_0 according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in M⊙.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_full_pos","page":"Home","title":"GadgetGalaxies.convert_units_full_pos","text":"convert_units_physical_pos(val::Real, h::SnapshotHeader)\nconvert_units_physical_pos(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_pos!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_pos(val::Real, h::SnapshotHeader)\nconvert_units_full_pos(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts positions via x to x(h_0 (z+1))) according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in kpc.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_full_temp","page":"Home","title":"GadgetGalaxies.convert_units_full_temp","text":"convert_units_physical_temp(val::Real, h::SnapshotHeader)\nconvert_units_physical_temp(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_temp!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_temp(val::Real, h::SnapshotHeader)\nconvert_units_full_temp(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts temperatures via T to T according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in K.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_full_vel","page":"Home","title":"GadgetGalaxies.convert_units_full_vel","text":"convert_units_physical_vel(val::Real, h::SnapshotHeader)\nconvert_units_physical_vel(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_vel!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_vel(val::Real, h::SnapshotHeader)\nconvert_units_full_vel(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts velocities via v to vsqrt(z+1)) according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in km s^-1.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical","page":"Home","title":"GadgetGalaxies.convert_units_physical","text":"convert_units_physical(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\nconvert_units_physical!(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\nconvert_units_full(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\n\nConverts simulation values to the respective physical values, depending on prop, which can take any of the following values: :pos, :vel, :temp, :mass, :age.\n\nFull returns values in Unitful quantities, whereas physical returns the phyiscal value without unit.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical!","page":"Home","title":"GadgetGalaxies.convert_units_physical!","text":"convert_units_physical(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\nconvert_units_physical!(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\nconvert_units_full(vals::AbstractArray{<:Real}, prop::Symbol, h::SnapshotHeader)\n\nConverts simulation values to the respective physical values, depending on prop, which can take any of the following values: :pos, :vel, :temp, :mass, :age.\n\nFull returns values in Unitful quantities, whereas physical returns the phyiscal value without unit.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_age-Tuple{Real, GadgetIO.SnapshotHeader}","page":"Home","title":"GadgetGalaxies.convert_units_physical_age","text":"convert_units_physical_age(val::Real, h::SnapshotHeader)\nconvert_units_physical_age(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_age!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_age(val::Real, h::SnapshotHeader)\nconvert_units_full_age(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts ages from the scale factor a via the lookback time according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in Gyr.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.convert_units_physical_mass","page":"Home","title":"GadgetGalaxies.convert_units_physical_mass","text":"convert_units_physical_mass(val::Real, h::SnapshotHeader)\nconvert_units_physical_mass(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_mass!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_mass(val::Real, h::SnapshotHeader)\nconvert_units_full_mass(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts masses via m to m times 10^10  h_0 according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in M⊙.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_mass!","page":"Home","title":"GadgetGalaxies.convert_units_physical_mass!","text":"convert_units_physical_mass(val::Real, h::SnapshotHeader)\nconvert_units_physical_mass(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_mass!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_mass(val::Real, h::SnapshotHeader)\nconvert_units_full_mass(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts masses via m to m times 10^10  h_0 according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in M⊙.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_pos","page":"Home","title":"GadgetGalaxies.convert_units_physical_pos","text":"convert_units_physical_pos(val::Real, h::SnapshotHeader)\nconvert_units_physical_pos(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_pos!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_pos(val::Real, h::SnapshotHeader)\nconvert_units_full_pos(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts positions via x to x(h_0 (z+1))) according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in kpc.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_pos!","page":"Home","title":"GadgetGalaxies.convert_units_physical_pos!","text":"convert_units_physical_pos(val::Real, h::SnapshotHeader)\nconvert_units_physical_pos(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_pos!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_pos(val::Real, h::SnapshotHeader)\nconvert_units_full_pos(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts positions via x to x(h_0 (z+1))) according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in kpc.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_temp","page":"Home","title":"GadgetGalaxies.convert_units_physical_temp","text":"convert_units_physical_temp(val::Real, h::SnapshotHeader)\nconvert_units_physical_temp(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_temp!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_temp(val::Real, h::SnapshotHeader)\nconvert_units_full_temp(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts temperatures via T to T according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in K.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_temp!","page":"Home","title":"GadgetGalaxies.convert_units_physical_temp!","text":"convert_units_physical_temp(val::Real, h::SnapshotHeader)\nconvert_units_physical_temp(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_temp!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_temp(val::Real, h::SnapshotHeader)\nconvert_units_full_temp(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts temperatures via T to T according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in K.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_vel","page":"Home","title":"GadgetGalaxies.convert_units_physical_vel","text":"convert_units_physical_vel(val::Real, h::SnapshotHeader)\nconvert_units_physical_vel(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_vel!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_vel(val::Real, h::SnapshotHeader)\nconvert_units_full_vel(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts velocities via v to vsqrt(z+1)) according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in km s^-1.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical_vel!","page":"Home","title":"GadgetGalaxies.convert_units_physical_vel!","text":"convert_units_physical_vel(val::Real, h::SnapshotHeader)\nconvert_units_physical_vel(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_physical_vel!(vals::AbstractArray{<:Real}, h::SnapshotHeader)\nconvert_units_full_vel(val::Real, h::SnapshotHeader)\nconvert_units_full_vel(vals::AbstractArray{<:Real}, h::SnapshotHeader)\n\nConverts velocities via v to vsqrt(z+1)) according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in km s^-1.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_solar_metallicity-Tuple{AbstractMatrix{var\"#s27\"} where var\"#s27\"<:Number, AbstractVector{var\"#s26\"} where var\"#s26\"<:Number}","page":"Home","title":"GadgetGalaxies.convert_units_solar_metallicity","text":"convert_units_solar_metallicity(zs::AbstractMatrix{<:Number}, mass::AbstractVector{<:Number})\n\nConverts an 11×n mass matrix and an n-length mass vector to a metallicity vector of length n, in solar metallicities.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.particle_type_id-Tuple{Symbol}","page":"Home","title":"GadgetGalaxies.particle_type_id","text":"particle_type_id(type::Symbol)\n\nReturns the Gadget particle type from a particle Symbol (currently :gas, :dm, :stars, and :bh).\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.read_halo!-Tuple{Galaxy}","page":"Home","title":"GadgetGalaxies.read_halo!","text":"read_halo!(g::Galaxy; kwargs...)\n\nReads particles of a Galaxy.\n\nKeywords\n\nradius::Union{Real,Nothing}=nothing: if nothing, the half-mass radius \"RHMS\"\nrad_scale::Real=1: read particles within rad_scale * radius of halo position\nunits::Symbol=:full: :full for units as Unitful quantities, :physical for values converted to physical units (kpc, km/s, solar metallicities etc.), :sim for values in simulation units\nuse_keys::Bool=true: if Peano-Hilbert keys should be used if possible\nverbose::Bool=false: verbose output\nprops::Tuple=(      (:gas, [\"POS\", \"VEL\", \"MASS\", \"TEMP\", \"SFR\", \"Zs\"]),      (:dm, [\"POS\", \"VEL\"]),      (:stars, [\"POS\", \"VEL\", \"MASS\", \"AGE\", \"Zs\", \"iM\"]),  ): particle types (see Particles) and properties to be read\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.read_redshift-Tuple{Snapshot}","page":"Home","title":"GadgetGalaxies.read_redshift","text":"read_redshift(snapshot::Snapshot)\n\nReturns the redshift z from the first snapfile's header.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.shift_across_box_border-NTuple{4, Number}","page":"Home","title":"GadgetGalaxies.shift_across_box_border","text":"shift_across_box_border(x::Number, x₀::Number, boxsize::Number, boxsize_half::Number)\n\nShift coordinate x across the box border if reference coordinate x₀ is on the other side.\n\n\n\n\n\n","category":"method"}]
}
