var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GadgetGalaxies","category":"page"},{"location":"#GadgetGalaxies","page":"Home","title":"GadgetGalaxies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GadgetGalaxies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GadgetGalaxies]","category":"page"},{"location":"#GadgetGalaxies.Ellipsoid","page":"Home","title":"GadgetGalaxies.Ellipsoid","text":"Ellipsoid(radius::Number, q::U, s::U, constant::Symbol) where U<:Real\n\nRepresents an ellipsoid with axis ratios q and s, formed by deforming a sphere of a certain radius at constant :volume or major :axis.\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Galaxy","page":"Home","title":"GadgetGalaxies.Galaxy","text":"Galaxy(snapshot::Snapshot,\n       isub::Integer,\n       subid::Union{HaloID,Nothing},\n       particles::Dict{Symbol,Particles})\n\nGalaxy of a given snapshot (Snapshot) with the zero-based subhalo index isub with Particles. Including subid (containing information on the exact position in the subfind files) makes accessing properties of the galaxy faster than when only having isub.\n\nThe particles are accessible via galaxy.particletype or galaxy[:particletype] (see Particles for typical types).\n\nExamples\n\njulia> p = GadgetGalaxies.Particles(:stars, Dict(\"ID\"=>[1, 2], \"MASS\"=>[1e11, 2e11]));\n\njulia> g = Galaxy(Snapshot(\"box\", 13), 1532, nothing, Dict(:stars=>p));\n\njulia> g.stars === p\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Galaxy-Tuple{Snapshot, Integer, Bool}","page":"Home","title":"GadgetGalaxies.Galaxy","text":"Galaxy(snapshot::Snapshot, isub[, get_id=true])\n\nConvenience method for creating a Galaxy with only a snapshot and a subfind id. Will try to read \"MSUB\" to extract the  if get_id is true.\n\nParticles can still be added after initializing the galaxy by calling for example galaxy.stars = [...].\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.GalaxyGroup","page":"Home","title":"GadgetGalaxies.GalaxyGroup","text":"GalaxyGroup(snapshot::Snapshot,\n       igroup::Integer,\n       groupid::Union{HaloID,Nothing},\n       particles::Dict{Symbol,Particles})\n\nGroup of a given snapshot (Snapshot) with the zero-based group index igroup with Particles. Including groupid (containing information on the exact position in the subfind files) makes accessing properties of the galaxy faster than when only having igroup.\n\nThe particles are accessible via group.particletype or group[:particletype] (see Particles for typical types).\n\nExamples\n\njulia> p = GadgetGalaxies.Particles(:stars, Dict(\"ID\"=>[1, 2], \"MASS\"=>[1e11, 2e11]));\n\njulia> g = GalaxyGroup(Snapshot(\"box\", 13), 164, nothing, Dict(:stars=>p));\n\njulia> g.stars === p\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.GalaxyGroup-Tuple{Snapshot, Integer, Bool}","page":"Home","title":"GadgetGalaxies.GalaxyGroup","text":"GalaxyGroup(snapshot::Snapshot, igroup[, get_id=true])\n\nConvenience method for creating a GalaxyGroup with only a snapshot and a subfind id. Will try to read \"MTOT\" to extract the  if get_id is true.\n\nParticles can still be added after initializing the group by calling for example group.stars = [...].\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.Particles","page":"Home","title":"GadgetGalaxies.Particles","text":"Particles(type::Symbol, properties::Dict{String})\n\nParticles of a type (typically :stars, :dm, :gas, or :bh) with their properties in a Dict. The Dict has String keys, which are set to all uppercase by default, with exception of iM and Zs.\n\nThe properties are accessible via particles.prop (case insensitive).\n\nExamples\n\njulia> p = GadgetGalaxies.Particles(:stars, Dict(\"ID\"=>[1, 2], \"MASS\"=>[1e11, 2e11]));\n\njulia> p.id\n2-element Vector{Int64}:\n 1\n 2\n\njulia> p.pos = [1 2; 3 4; 5 6]\n3×2 Matrix{Int64}:\n 1  2\n 3  4\n 5  6\n\njulia> p.properties[\"POS\"] === p.pos\ntrue\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Snapshot","page":"Home","title":"GadgetGalaxies.Snapshot","text":"Snapshot(snapbase, subbase)\n\nReturns a Snapshot from a snapbase and a subbase, which can also be nothing. Both can be files or the base part of files ending with .0, .1, etc.\n\n\n\n\n\n","category":"type"},{"location":"#GadgetGalaxies.Snapshot-Tuple{Any, Integer}","page":"Home","title":"GadgetGalaxies.Snapshot","text":"Snapshot(path_box, snap::Integer; snapbase=true, subbase=true)\n\nConvenience method for creating a Snapshot from the path to a simulated box and a snapshot number. Setting snapbase or subbase to false sets the respective file base to nothing.\n\nThe formats used are the following, for snapbase and subbase, respectively:\n\nsnapdir_XXX/snap_XXX\ngroups_XXX/sub_XXX\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.Snapshot-Tuple{}","page":"Home","title":"GadgetGalaxies.Snapshot","text":"Snapshot(; snapbase=nothing, subbase=nothing)\n\nConvenience method for creating a Snapshot where one of the base files does not exist.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.Sphere-Tuple{Number}","page":"Home","title":"GadgetGalaxies.Sphere","text":"Sphere(radius::Number)\n\nReturns a spherical Ellipsoid with the specified radius.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.center_of_mass_iterative","page":"Home","title":"GadgetGalaxies.center_of_mass_iterative","text":"center_of_mass_iterative(g::AbstractGalaxy, r_start::Number, ptype::Symbol=:stars; kwargs...)\n\nReturns the center of mass of the galaxy's particles of type ptype (:stars, :dm, :gas, etc.).\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.center_of_mass_iterative-Tuple{AbstractMatrix{var\"#s27\"} where var\"#s27\"<:Number, AbstractVector{var\"#s26\"} where var\"#s26\"<:Number, Number}","page":"Home","title":"GadgetGalaxies.center_of_mass_iterative","text":"center_of_mass_iterative(\n    pos::AbstractMatrix{<:Number},\n    mass::AbstractVector{<:Number},\n    r_start::Number;\n    shrinking_factor::Real=0.025,\n    limit_fraction::Real=0.01,\n    limit_number::Integer=1000,\n)\n\nReturns the center of mass by applying the shrinking sphere method (Power et al. 2003).\n\nThe sphere starts centered at the coordinate system's origin with a radius of r_start and shrinks by shrinking_factor every iteration. The iteration is stopped when the sphere contains fewer than limit_number and fewer than limit_fraction times the number of particles in the starting sphere, whichever is smaller.\n\nThe radius of the sphere in iteration step i is r_0 (1 - f_mathrmshrink)^i.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.center_of_mass_iterative-Tuple{GadgetGalaxies.Particles, Number}","page":"Home","title":"GadgetGalaxies.center_of_mass_iterative","text":"center_of_mass_iterative(p::Particles, r_start::Number; kwargs...)\n\nReturns the center of mass of the particles.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.center_of_velocity","page":"Home","title":"GadgetGalaxies.center_of_velocity","text":"center_of_velocity(g::AbstractGalaxy, radius::Number, ptype::Symbol=:stars; kwargs...)\n\nReturns the center of velocity of the galaxy's particles of type ptype (:stars, :dm, :gas, etc.). Requires \"POS\", \"VEL\", and \"MASS\" of the particle type to be available.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.center_of_velocity-Tuple{AbstractMatrix{var\"#s1\"} where var\"#s1\"<:Number, AbstractMatrix{var\"#s35\"} where var\"#s35\"<:Number, AbstractVector{var\"#s36\"} where var\"#s36\"<:Number, Number}","page":"Home","title":"GadgetGalaxies.center_of_velocity","text":"center_of_velocity(\n    pos::AbstractMatrix{<:Number},\n    vel::AbstractMatrix{<:Number},\n    mass::AbstractVector{<:Number},\n    radius::Number;\n    p::Real=0.9,\n    r₀::Union{AbstractVector{<:Number},Nothing}=nothing,\n)\n\nReturns mass-weighted mean velocity within radius around r₀, only considering absolute velocities smaller than the pth quantile (any value between 0 and 1) when centered around the median velocity.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.center_of_velocity-Tuple{GadgetGalaxies.Particles, Number}","page":"Home","title":"GadgetGalaxies.center_of_velocity","text":"center_of_velocity(p::Particles, radius::Number; kwargs...)\n\nReturns the center of velocity of the particles. Requires \"POS\", \"VEL\", and \"MASS\" to be available.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.convert_units!","page":"Home","title":"GadgetGalaxies.convert_units!","text":"convert_units!(p::Particles, h, units::Symbol=:full)\n\nConverts the units of the particles properties (see Particles) from a snapshot or subfind header in-place. Use :full for units as Unitful quantities, :physical for values converted to physical units (kpc, km/s, solar metallicities etc.), or :sim for values in simulation units. The individual metallicities in \"Zs\" are converted to a one-dimensional Vector of values in solar metallicities in any case.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_age","page":"Home","title":"GadgetGalaxies.convert_units_age","text":"convert_units_age(val::Union{Real,AbstractArray{<:Real}}, h, units::Symbol=:full)\nconvert_units_physical_age(val::Real, h)\nconvert_units_physical_age(vals::AbstractArray{<:Real}, h)\nconvert_units_physical_age!(vals::AbstractArray{<:Real}, h)\nconvert_units_full_age(val::Real, h)\nconvert_units_full_age(vals::AbstractArray{<:Real}, h)\n\nConverts ages from the scale factor a via the lookback time according to the cosmology defined by the snapshot header. Full returns values in Unitful quantities, whereas physical returns the physical value in Gyr.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_full","page":"Home","title":"GadgetGalaxies.convert_units_full","text":"convert_units_physical(vals::AbstractArray{<:Real}, prop::Symbol, h)\nconvert_units_physical!(vals::AbstractArray{<:Real}, prop::Symbol, h)\nconvert_units_full(vals::AbstractArray{<:Real}, prop::Symbol, h)\n\nConverts simulation values to the respective physical values, depending on prop, which can take any of the following values: :pos, :vel, :temp, :mass, :age.\n\nFull returns values in Unitful quantities, whereas physical returns the physical value without unit.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_mass","page":"Home","title":"GadgetGalaxies.convert_units_mass","text":"convert_units_mass(val::Union{Real,AbstractArray{<:Real}}, h, units::Symbol=:full)\nconvert_units_physical_mass(val::Real, h)\nconvert_units_physical_mass(vals::AbstractArray{<:Real}, h)\nconvert_units_physical_mass!(vals::AbstractArray{<:Real}, h)\nconvert_units_full_mass(val::Real, h)\nconvert_units_full_mass(vals::AbstractArray{<:Real}, h)\n\nConverts masses via m to m times 10^10  h_0 according to the cosmology defined by the snapshot header. :full returns values in Unitful quantities, whereas :physical returns the physical value in M⊙. :sim simply returns val.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_physical","page":"Home","title":"GadgetGalaxies.convert_units_physical","text":"convert_units_physical(vals::AbstractArray{<:Real}, prop::Symbol, h)\nconvert_units_physical!(vals::AbstractArray{<:Real}, prop::Symbol, h)\nconvert_units_full(vals::AbstractArray{<:Real}, prop::Symbol, h)\n\nConverts simulation values to the respective physical values, depending on prop, which can take any of the following values: :pos, :vel, :temp, :mass, :age.\n\nFull returns values in Unitful quantities, whereas physical returns the physical value without unit.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_pos","page":"Home","title":"GadgetGalaxies.convert_units_pos","text":"convert_units_pos(val::Union{Real,AbstractArray{<:Real}}, h, units::Symbol=:full)\nconvert_units_physical_pos(val::Real, h)\nconvert_units_physical_pos(vals::AbstractArray{<:Real}, h)\nconvert_units_physical_pos!(vals::AbstractArray{<:Real}, h)\nconvert_units_full_pos(val::Real, h)\nconvert_units_full_pos(vals::AbstractArray{<:Real}, h)\n\nConverts positions via x to x(h_0 (z+1))) according to the cosmology defined by the snapshot header. :full returns values in Unitful quantities, whereas :physical returns the physical value in kpc. :sim simply returns val.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_solar_metallicity-Tuple{AbstractMatrix{var\"#s53\"} where var\"#s53\"<:Number, AbstractVector{var\"#s52\"} where var\"#s52\"<:Number}","page":"Home","title":"GadgetGalaxies.convert_units_solar_metallicity","text":"convert_units_solar_metallicity(zs::AbstractMatrix{<:Number}, mass::AbstractVector{<:Number})\n\nConverts an 11×n mass matrix and an n-length mass vector to a metallicity vector of length n, in solar metallicities.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.convert_units_temp","page":"Home","title":"GadgetGalaxies.convert_units_temp","text":"convert_units_temp(val::Union{Real,AbstractArray{<:Real}}, h, units::Symbol=:full)\nconvert_units_physical_temp(val::Real, h)\nconvert_units_physical_temp(vals::AbstractArray{<:Real}, h)\nconvert_units_physical_temp!(vals::AbstractArray{<:Real}, h)\nconvert_units_full_temp(val::Real, h)\nconvert_units_full_temp(vals::AbstractArray{<:Real}, h)\n\nConverts temperatures via T to T according to the cosmology defined by the snapshot header. :full returns values in Unitful quantities, whereas :physical returns the physical value in K. :sim simply returns val.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.convert_units_vel","page":"Home","title":"GadgetGalaxies.convert_units_vel","text":"convert_units_vel(val::Union{Real,AbstractArray{<:Real}}, h, units::Symbol=:full)\nconvert_units_physical_vel(val::Real, h)\nconvert_units_physical_vel(vals::AbstractArray{<:Real}, h)\nconvert_units_physical_vel!(vals::AbstractArray{<:Real}, h)\nconvert_units_full_vel(val::Real, h)\nconvert_units_full_vel(vals::AbstractArray{<:Real}, h)\n\nConverts velocities via v to vsqrtz+1) according to the cosmology defined by the snapshot header. :full returns values in Unitful quantities, whereas :physical returns the physical value in km s^-1. :sim simply returns val.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.eccentricity-Tuple{Real}","page":"Home","title":"GadgetGalaxies.eccentricity","text":"eccentricity(q::Real)\n\nEccentricity from axis ratio q: e = sqrt1 - q^2\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.ellipsoidal_mask-Tuple{AbstractMatrix{var\"#s51\"} where var\"#s51\"<:Number, Ellipsoid}","page":"Home","title":"GadgetGalaxies.ellipsoidal_mask","text":"ellipsoidal_mask(\n    pos::AbstractMatrix{<:Number},\n    ellipsoid::Ellipsoid;\n    return_r²_ellipsoid::Bool=false,\n)\n\nCreate a BitArray for masking the particles within an ellipsoid.\n\nThe ellipsoid is centered around the origin of the coordinate system with its axes placed on the x, y, and z axes, from smallest to largest. If return_r²_ellipsoid is true, returns a tuple of the mask and the vector r² for all particles.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.ellipticity-Tuple{Real}","page":"Home","title":"GadgetGalaxies.ellipticity","text":"ellipticity(q::Real)\n\nEllipticity from axis ratio q: ϵ = 1 - q\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.fill_𝐈_up!-Tuple{AbstractMatrix{var\"#s30\"} where var\"#s30\"<:Real, AbstractMatrix{var\"#s29\"} where var\"#s29\"<:Number, Union{Nothing, AbstractVector{var\"#s28\"} where var\"#s28\"<:Number}, Bool, Symbol}","page":"Home","title":"GadgetGalaxies.fill_𝐈_up!","text":"fill_𝐈_up!(\n    𝐈_up::AbstractMatrix{<:Real},\n    pos::AbstractMatrix{<:Number},\n    mass::Union{AbstractVector{<:Number},Nothing},\n    mass_weighted::Bool,\n    inertia_matrix_type::Symbol;\n    r²::Union{AbstractVector{<:Number},Nothing}=nothing,\n)\n\nFill upper triangle of the inertia matrix for inertia_matrix and inertia_matrix_iterative\n\nArguments\n\nmass_weighted::Bool: true if positions should be weighted by mass\ninertia_matrix_type::Symbol: set to :unweighted or :reduced\n\nKeyword Arguments\n\nr²::Union{AbstractVector{<:Number},Nothing}: if precomputed, the absolute squared distances from the coordinate system's origin; only used when :reduced is used\n\nNote that in the mass-weighted cases, it is not normalized to the total mass, i.e. different than in Eq2/Eq3 of T2015.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.half_mass_radius-Tuple{AbstractMatrix{var\"#s35\"} where var\"#s35\"<:Number, AbstractVector{var\"#s34\"} where var\"#s34\"<:Number, AbstractVector{var\"#s33\"} where var\"#s33\"<:Number}","page":"Home","title":"GadgetGalaxies.half_mass_radius","text":"half_mass_radius(\n    pos::AbstractMatrix{<:Number},\n    mass::Union{AbstractVector{<:Number},Nothing},\n    [r²::AbstractVector{<:Number}];\n    r_max::Union{Number,Nothing}=nothing,\n)\n\nReturns the half-mass radius of the particles within radius r_max, or of all particles if r_max is nothing.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.half_mass_radius-Tuple{AbstractMatrix{var\"#s51\"} where var\"#s51\"<:Number}","page":"Home","title":"GadgetGalaxies.half_mass_radius","text":"half_mass_radius(pos::AbstractMatrix{<:Number}; r_max::Union{Number,Nothing}=nothing)\n\nReturns the half-mass radius of the particles within radius r_max assuming equal masses of all particles, or of all particles if r_max is nothing.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.half_mass_radius-Tuple{GadgetGalaxies.Particles}","page":"Home","title":"GadgetGalaxies.half_mass_radius","text":"half_mass_radius(g::AbstractGalaxy, ptype::Symbol; kwargs...)\nhalf_mass_radius(p::Particles; kwargs...)\n\nReturns the particles' half-mass radius, depending on if a mass vector is available or not. If the mass is not available, equal particle masses are assumed.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.half_mass_radius_2D-Tuple{AbstractMatrix{var\"#s39\"} where var\"#s39\"<:Number, AbstractVector{var\"#s38\"} where var\"#s38\"<:Number}","page":"Home","title":"GadgetGalaxies.half_mass_radius_2D","text":"half_mass_radius_2D(\n    pos::AbstractMatrix{<:Number},\n    [mass::Union{AbstractVector{<:Number},Nothing}];\n    r_max::Union{Number,Nothing}=nothing,\n    perspective::Symbol=:edgeon,\n)\n\nReturns the 2D half-mass radius of the particles within radius r_max when viewed from a given perspective (:edgeon, :sideon, :faceon), or of all particles if r_max is nothing.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.half_mass_radius_2D-Tuple{GadgetGalaxies.Particles}","page":"Home","title":"GadgetGalaxies.half_mass_radius_2D","text":"half_mass_radius_2D(g::AbstractGalaxy, ptype::Symbol; kwargs...)\nhalf_mass_radius_2D(p::Particles; kwargs...)\n\nReturns the particles' 2D half-mass radius, depending on if a mass vector is available or not. If the mass is not available, equal particle masses are assumed.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.inertia_matrix-Tuple{AbstractMatrix{var\"#s31\"} where var\"#s31\"<:Number, Union{Nothing, AbstractVector{var\"#s30\"} where var\"#s30\"<:Number}}","page":"Home","title":"GadgetGalaxies.inertia_matrix","text":"inertia_matrix(\n    pos::AbstractMatrix{<:Number},\n    mass::Union{AbstractVector{<:Number},Nothing};\n    mass_weighted::Bool=true,\n    inertia_matrix_type::Symbol=:unweighted,\n)\n\nCreate inertia matrix of different types.\n\nKeyword Arguments\n\nmass_weighted::Bool: true if positions should be weighted by mass\ninertia_matrix_type::Symbol: set to :unweighted or :reduced\n\nInertia matrix types\n\nUnweighted:               Eq. 1 in Joachimi et al. 2013,\nMass-weighted unweighted: Eq. 2 in Tenneti et al. 2015,\nReduced:                  Eq. 3 in Tenneti et al. 2015,                           but without the mass weighting,\nMass-weighted reduced:    Eq. 3 in Tenneti et al. 2015.\n\nNote that in the mass-weighted cases, it is not normalized to the total mass, i.e. different than in Eq2/Eq3 of T2015.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.inertia_matrix_iterative-Tuple{AbstractMatrix{var\"#s29\"} where var\"#s29\"<:Number, Union{Nothing, AbstractVector{var\"#s28\"} where var\"#s28\"<:Number}, Symbol}","page":"Home","title":"GadgetGalaxies.inertia_matrix_iterative","text":"inertia_matrix_iterative(\n    pos::AbstractMatrix{<:Number},\n    mass::Union{AbstractVector{<:Number},Nothing},\n    inertia_matrix_type::Symbol;\n    radius::Union{Number,Nothing}=nothing,\n    mass_weighted::Bool=true,\n    ellipsoidal_distance::Bool=false,\n    constant_volume::Bool=true,\n    ϵ::Real=1e-4,\n)\n\nCreate inertia matrix of different types iteratively (generally more stable than inertia_matrix).\n\nKeyword Arguments\n\nradius::Union{Number,Nothing}: radius of the sphere to start the iteration with\nmass_weighted::Bool: true if positions should be weighted by mass\nellipsoidal_distance::Bool: only in combination with reduced inertia matrix type; true to use distances corrected by ellipsoidal axes\nconstant_volume::Bool: true if the sphere should be deformed into an ellipsoid with constant volume, false for constant major axis\nϵ::Real: iterate until a relative change of the shape axis ratios less than ϵ is encountered\n\nInertia matrix types\n\nUnweighted:               Eq. 1 in Joachimi et al. 2013,\nMass-weighted unweighted: Eq. 2 in Tenneti et al. 2015,\nReduced:                  Eq. 3 in Tenneti et al. 2015,                           but without the mass weighting,\nMass-weighted reduced:    Eq. 3 in Tenneti et al. 2015.\nReduced with ellipsoidal distances:               TODO\nMass-weighted reduced with ellipsoidal distances: TODO\n\nNote that in the mass-weighted cases, it is not normalized to the total mass, i.e. different than in Eq2/Eq3 of T2015.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.is_main_halo-Tuple{Galaxy}","page":"Home","title":"GadgetGalaxies.is_main_halo","text":"is_main_halo(g::Galaxy)\n\nReturns if the subhalo is the first subhalo in its respective group.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.particle_type_id-Tuple{Symbol}","page":"Home","title":"GadgetGalaxies.particle_type_id","text":"particle_type_id(type::Symbol)\n\nReturns the Gadget particle type from a particle Symbol (currently :gas, :dm, :stars, and :bh).\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.read_galaxy_pos","page":"Home","title":"GadgetGalaxies.read_galaxy_pos","text":"read_galaxy_pos(g::AbstractGalaxy, units::Symbol=:full; verbose::Bool=false)\n\nReturns the galaxy's position from subfind using GPOS for a group and SPOS for a subhalo.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.read_galaxy_prop","page":"Home","title":"GadgetGalaxies.read_galaxy_prop","text":"read_galaxy_prop(g::AbstractGalaxy, prop::AbstractString, units::Symbol=:full; verbose::Bool=false)\n\nReads galaxy property from subfind for g. Use :full for units as Unitful quantities, :physical for values converted, and :sim for values in simulation units.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.read_galaxy_vel","page":"Home","title":"GadgetGalaxies.read_galaxy_vel","text":"read_galaxy_vel(g::Galaxy, units::Symbol=:full; verbose::Bool=false)\n\nReturns the galaxy's velocity from subfind using SVEL of FSUB for a group and SVEL for a subhalo.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.read_halo!-Tuple{GadgetGalaxies.AbstractGalaxy}","page":"Home","title":"GadgetGalaxies.read_halo!","text":"read_halo!(g::Galaxy; kwargs...)\n\nReads particles of a Galaxy.\n\nKeywords\n\nradius::Union{Number,Nothing}=nothing: if nothing, the half-mass radius \"RHMS\"\nradius_units::Symbol=:physical: :physical or :sim, depending on the units of radius\nrad_scale::Real=1: read particles within rad_scale * radius of halo position\nunits::Symbol=:full: use :full for units as Unitful quantities, :physical for values converted to physical units (kpc, km/s, solar metallicities etc.), :sim for values in simulation units\nuse_keys::Bool=true: if Peano-Hilbert keys should be used if possible\nverbose::Bool=false: verbose output\nprops::Tuple=(      (:gas, [\"POS\", \"VEL\", \"MASS\", \"TEMP\", \"SFR\", \"Zs\"]),      (:dm, [\"POS\", \"VEL\"]),      (:stars, [\"POS\", \"VEL\", \"MASS\", \"AGE\", \"Zs\", \"iM\"])  ): particle types (see Particles) and properties to be read\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.read_header_particle_mass","page":"Home","title":"GadgetGalaxies.read_header_particle_mass","text":"read_dm_particle_mass(snapshot::Snapshot, units::Symbol=:full; verbose::Bool=false)\n\nReturns the particle mass from the first snapfile's header for a particle type (:dm, :gas, etc.).\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.read_redshift-Tuple{Snapshot}","page":"Home","title":"GadgetGalaxies.read_redshift","text":"read_redshift(snapshot::Snapshot)\n\nReturns the redshift z from the first subfile's header.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotate-Tuple{AbstractMatrix{var\"#s32\"} where var\"#s32\"<:Number, AbstractMatrix{var\"#s31\"} where var\"#s31\"<:Real}","page":"Home","title":"GadgetGalaxies.rotate","text":"rotate(vals::AbstractMatrix{<:Number}, rotmat::AbstractMatrix{<:Real})\nrotate!(vals::AbstractMatrix{<:Number}, rotmat::AbstractMatrix{<:Real})\n\nReturns vals rotated by the rotation matrix rotmat. Works for any dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotate-Tuple{GadgetGalaxies.AbstractGalaxy, AbstractMatrix{var\"#s31\"} where var\"#s31\"<:Real}","page":"Home","title":"GadgetGalaxies.rotate","text":"rotate(g::AbstractGalaxy, rotmat::AbstractMatrix{<:Real})\nrotate!(g::AbstractGalaxy, rotmat::AbstractMatrix{<:Real})\n\nRotates the galaxy g by the 3 times 3 rotation matrix rotmat.\n\nThe non-in-place version rotate creates a copy of the galaxy with only new pointers to the rotated quantites (generally \"POS\" and \"VEL\") and copies of the particle Dicts.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotate-Tuple{GadgetGalaxies.Particles, AbstractMatrix{var\"#s32\"} where var\"#s32\"<:Real}","page":"Home","title":"GadgetGalaxies.rotate","text":"rotate(p::Particles, rotmat::AbstractMatrix{<:Real})\nrotate!(p::Particles, rotmat::AbstractMatrix{<:Real})\n\nRotates the particles p by the 3 times 3 rotation matrix rotmat.\n\nThe non-in-place version rotate creates a copy of the particles with only new pointers to the rotated properties (generally \"POS\" and \"VEL\").\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotate_edgeon","page":"Home","title":"GadgetGalaxies.rotate_edgeon","text":"rotate_edgeon(g::AbstractGalaxy, ptype::Symbol=:stars; axis_ratios::Bool=false, kwargs...)\nrotate_edgeon!(g::AbstractGalaxy, ptype::Symbol=:stars; axis_ratios::Bool=false, kwargs...)\n\nRotates the galaxy's particles edge-on for the given particle type ptype (:stars, :dm, :gas, etc.) using the given shape determination algorithm and radius (see rotation_matrix_edgeon for all keyword parameters).\n\nKeyword parameters\n\naxis_ratios::Bool: true to return tuple (g, q, s) with galaxy and axis ratios\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.rotate_edgeon-Tuple{GadgetGalaxies.Particles}","page":"Home","title":"GadgetGalaxies.rotate_edgeon","text":"rotate_edgeon(p::Particles; axis_ratios::Bool=false, kwargs...)\nrotate_edgeon!(p::Particles; axis_ratios::Bool=false, kwargs...)\n\nRotates the particles edge-on using the given shape determination algorithm and radius (see rotation_matrix_edgeon for all keyword parameters).\n\nKeyword parameters\n\naxis_ratios::Bool: true to return tuple (p, q, s) with particles and axis ratios\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotation_matrix_2D-Tuple{GadgetGalaxies.Particles}","page":"Home","title":"GadgetGalaxies.rotation_matrix_2D","text":"rotation_matrix_2D(\n    p::Particles;\n    radius::Union{Number,Nothing}=nothing,\n    mass_weighted::Bool=true,\n    inertia_matrix_type=:unweighted,\n    iterative::Bool=true,\n    elliptical_distance::Bool=false,\n    constant_area::Bool=true,\n    algorithm::Union{Symbol,Nothing}=nothing,\n    perspective::Symbol=:edgeon,\n    matrix_2d::Bool=false,\n)\n\nReturns a tuple of the 3D or 2D rotation matrix for rotating the particles in 2D, so that the fitted ellipse is aligned with the axes, and the axis ratio q. If matrix_2d is true, will return the 2D rotation matrix, otherwise the 3D rotation matrix.\n\nSee inertia_matrix and inertia_matrix_iterative for the algorithms used for computing the inertia matrix (here only used in 2D, note that terminology is different than in 3D, i.e. elliptical instead of ellipsoidal and constant area instead of volume).\n\nKeyword Arguments\n\nradius::Union{Number,Nothing}: radius of the initial circle for determining the inertia matrix (nothing to include all particles)\nmass_weighted::Bool: true if positions should be weighted by mass\ninertia_matrix_type: set to :unweighted or :reduced\niterative::Bool: true to use inertia_matrix_iterative, false for intertia_matrix\nelliptical_distance::Bool: true only considered together with inertia matrix type :reduced\nconstant_area::Bool: true if the circle should be deformed into an ellipse with constant area, false for constant major axis\nalgorithm::Union{Symbol,Nothing}: one of :unw, :red, :unw_i_vol, :unw_i_ax, :red_i_vol, :red_i_ax, :red_ell_i_vol, :red_ell_i_ax (note the same use of vol like in the 3D case instead of area)\nperspective::Symbol: one of :edgeon, :sideon, :faceon\nmatrix_2d::Bool: true to return 2D rotation matrix, false to return only 3D rotation matrix\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotation_matrix_axis_ratios-Tuple{AbstractMatrix{var\"#s50\"} where var\"#s50\"<:Real}","page":"Home","title":"GadgetGalaxies.rotation_matrix_axis_ratios","text":"rotation_matrix_axis_ratios(𝐈::AbstractMatrix{<:Real})\n\nReturns rotation matrix Q⁻¹ and axis ratios q and s for an inertia matrix 𝐈. s is nothing if 𝐈 is a 2D matrix. If return_axes is true, returns the same tuple with an additional element: an array of the ellipsoid axis vectors.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotation_matrix_edgeon-Tuple{GadgetGalaxies.Particles}","page":"Home","title":"GadgetGalaxies.rotation_matrix_edgeon","text":"rotation_matrix_edgeon(\n    p::Particles;\n    radius::Union{Number,Nothing}=nothing,\n    mass_weighted::Bool=true,\n    inertia_matrix_type=:unweighted,\n    iterative::Bool=false,\n    ellipsoidal_distance::Bool=false,\n    constant_volume::Bool=true,\n    algorithm::Union{Symbol,Nothing}=nothing,\n    return_axes::Bool=false,\n)\n\nReturns a tuple of the 3D rotation matrix for transforming the particles edge-on using the given shape determination algorithm, and the axis ratios q and s. If return_axes is true, returns the same tuple with an additional element: an array of the ellipsoid axis vectors.\n\nSee inertia_matrix and inertia_matrix_iterative for the algorithms used for computing the inertia matrix.\n\nKeyword Arguments\n\nradius::Union{Number,Nothing}: radius of the initial sphere for determining the inertia matrix (nothing to include all particles)\nmass_weighted::Bool: true if positions should be weighted by mass\ninertia_matrix_type: set to :unweighted or :reduced\niterative::Bool: true to use inertia_matrix_iterative, false for intertia_matrix\nellipsoidal_distance::Bool: true only considered together with inertia matrix type :reduced\nconstant_volume::Bool: true if the sphere should be deformed into an ellipsoid with constant volue, false for constant major axis\nalgorithm::Union{Symbol,Nothing}: one of :unw, :red, :unw_i_vol, :unw_i_ax, :red_i_vol, :red_i_ax, :red_ell_i_vol, :red_ell_i_ax\nreturn_axes::Bool: true to return tuple (rotmat, q, s), false to return only rotmat\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.rotation_matrix_to_3d-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractVector{var\"#s52\"} where var\"#s52\"<:Integer}} where T<:Real","page":"Home","title":"GadgetGalaxies.rotation_matrix_to_3d","text":"rotation_matrix_to_3d(R::AbstractMatrix{T}, dims::AbstractVector{<:Integer}) where T<:Real\n\nConverts a 2D rotation matrix R in the plane given by dimensions dims (e.g. [1, 2] or [3, 1]) to a 3D rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.r²_circle-Tuple{AbstractMatrix{var\"#s54\"} where var\"#s54\"<:Number}","page":"Home","title":"GadgetGalaxies.r²_circle","text":"r²_circle(pos::AbstractMatrix{<:Number})\n\nSquared distances in 2D from origin.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.r²_ellipsoid-Tuple{AbstractMatrix{var\"#s54\"} where var\"#s54\"<:Number, Real, Nothing}","page":"Home","title":"GadgetGalaxies.r²_ellipsoid","text":"r²_ellipsoid(pos::AbstractMatrix{<:Number}, q::Real, s::Nothing)\n\nSquared ellipsoidal distances in 2D from origin with axis ratio q.\n\nFor 3D version, see Eq. 6 in Allgood et al. 2006, https://arxiv.org/abs/astro-ph/0508497\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.r²_ellipsoid-Tuple{AbstractMatrix{var\"#s54\"} where var\"#s54\"<:Number, Real, Real}","page":"Home","title":"GadgetGalaxies.r²_ellipsoid","text":"r²_ellipsoid(pos::AbstractMatrix{<:Number}, q::Real, s::Real)\n\nSquared ellipsoidal distances from origin with axis ratios q and s.\n\nSee Eq. 6 in Allgood et al. 2006, https://arxiv.org/abs/astro-ph/0508497\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.r²_sphere-Tuple{AbstractMatrix{var\"#s54\"} where var\"#s54\"<:Number}","page":"Home","title":"GadgetGalaxies.r²_sphere","text":"r²_sphere(pos::AbstractMatrix{<:Number})\n\nSquared distances from origin in 2D (calls r²_circle in those cases) and 3D.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.shift_across_box_border-NTuple{4, Number}","page":"Home","title":"GadgetGalaxies.shift_across_box_border","text":"shift_across_box_border(x::Number, x₀::Number, boxsize::Number, boxsize_half::Number)\n\nShift coordinate x across the box border if reference coordinate x₀ is on the other side.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.simulation_units_mass","page":"Home","title":"GadgetGalaxies.simulation_units_mass","text":"simulation_units_mass(val::Number, h)\nsimulation_units_mass(vals::AbstractArray{<:Number}, h)\nsimulation_units_mass!(vals::AbstractArray{<:Real}, h)\n\nConverts masses via m to m times h_0  10^10 according to the cosmology defined by the snapshot header from physical to simulation units. Unitless parameters need to be given in M⊙.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.simulation_units_pos","page":"Home","title":"GadgetGalaxies.simulation_units_pos","text":"simulation_units_pos(val::Number, h)\nsimulation_units_pos(vals::AbstractArray{<:Number}, h)\nsimulation_units_pos!(vals::AbstractArray{<:Real}, h)\n\nConverts positions via x to x times h_0 (z+1) according to the cosmology defined by the snapshot header from physical to simulation units. Unitless parameters need to be given in kpc.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.simulation_units_temp","page":"Home","title":"GadgetGalaxies.simulation_units_temp","text":"simulation_units_temp(val::Number, h)\nsimulation_units_temp(vals::AbstractArray{<:Number}, h)\nsimulation_units_temp!(vals::AbstractArray{<:Real}, h)\n\nConverts temperatures via T to T according to the cosmology defined by the snapshot header from physical to simulation units. Unitless parameters need to be given in K.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.simulation_units_vel","page":"Home","title":"GadgetGalaxies.simulation_units_vel","text":"simulation_units_vel(val::Number, h)\nsimulation_units_vel(vals::AbstractArray{<:Number}, h)\nsimulation_units_vel!(vals::AbstractArray{<:Real}, h)\n\nConverts velocities via v to v times sqrtz+1 according to the cosmology defined by the snapshot header from physical to simulation units. Unitless parameters need to be given in km s^-1.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.translate","page":"Home","title":"GadgetGalaxies.translate","text":"translate(g::AbstractGalaxy, x⃗::AbstractVector{<:Number}, prop::Symbol=:pos)\ntranslate!(g::AbstractGalaxy, x⃗::AbstractVector{<:Number}, prop::Symbol=:pos)\n\nTranslates the galaxy g by the vector x⃗.\n\nThe non-in-place version translate creates a copy of the galaxy with only new pointers to the property and copies of the particle Dicts.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.translate-2","page":"Home","title":"GadgetGalaxies.translate","text":"translate(p::Particles, x⃗::AbstractVector{<:Number}, prop::Symbol=:pos)\ntranslate!(p::Particles, x⃗::AbstractVector{<:Number}, prop::Symbol=:pos)\n\nTranslates the particles p by the vector x⃗.\n\nThe non-in-place version translate creates a copy of the particles with only new pointers to the property.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.translate_to_center_of_mass_iterative","page":"Home","title":"GadgetGalaxies.translate_to_center_of_mass_iterative","text":"translate_to_center_of_mass_iterative(g::AbstractGalaxy, r_start::Number, ptype::Symbol=:stars; kwargs...)\ntranslate_to_center_of_mass_iterative!(g::AbstractGalaxy, r_start::Number, ptype::Symbol=:stars; kwargs...)\n\nTranslates the particles to their center of mass of the particles (see center_of_mass_iterative).\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.translate_to_center_of_mass_iterative-Tuple{GadgetGalaxies.Particles, Number}","page":"Home","title":"GadgetGalaxies.translate_to_center_of_mass_iterative","text":"translate_to_center_of_mass_iterative(p::Particles, r_start::Number; kwargs...)\ntranslate_to_center_of_mass_iterative!(p::Particles, r_start::Number; kwargs...)\n\nTranslates the particles to their center of mass of the particles (see center_of_mass_iterative).\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.translate_to_center_of_velocity","page":"Home","title":"GadgetGalaxies.translate_to_center_of_velocity","text":"translate_to_center_of_velocity(g::AbstractGalaxy, radius::Number, ptype::Symbol=:stars; kwargs...)\ntranslate_to_center_of_velocity!(g::AbstractGalaxy, radius::Number, ptype::Symbol=:stars; kwargs...)\n\nTranslates the particles to their center of velocity of the particles (see center_of_velocity). Requires \"POS\", \"VEL\", and \"MASS\" of the particle type to be available.\n\n\n\n\n\n","category":"function"},{"location":"#GadgetGalaxies.translate_to_center_of_velocity-Tuple{GadgetGalaxies.Particles, Number}","page":"Home","title":"GadgetGalaxies.translate_to_center_of_velocity","text":"translate_to_center_of_velocity(p::Particles, radius::Number; kwargs...)\ntranslate_to_center_of_velocity!(p::Particles, radius::Number; kwargs...)\n\nTranslates the particles to their center of velocity of the particles (see center_of_velocity). Requires \"POS\", \"VEL\", and \"MASS\" to be available.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetGalaxies.triaxiality-Tuple{Real, Real}","page":"Home","title":"GadgetGalaxies.triaxiality","text":"triaxiality(q::Real, s::Real)\n\nTriaxiality from the axis ratios q and s.\n\n0  T  13: oblate\n13  T  23: triaxial\n23  T  1:   prolate\n\n\n\n\n\n","category":"method"}]
}
